openapi: 3.0.2
info:
  title: cloudmesh-cc
  version: 4.3.6
paths:
  /workflows:
    get:
      tags:
        - workflow
      summary: List Workflows
      description: >-
        This command returns a list of workflows that is found within

        the server.

        curl -X 'GET'         'http://127.0.0.1:8000/workflows'         -H
        'accept: application/json'

        :return: list of workflow names
      operationId: list_workflows_workflows_get
      parameters:
        - required: false
          schema:
            title: Output
            type: string
          name: output
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /upload:
    post:
      tags:
        - workflow
      summary: Upload
      description: >-
        upload a workflow to the ~/.cloudmesh/workflow directory for running

        or editing.

        :param directory: path to directory with workflow files

        :type directory: str

        curl -X 'POST'        
        'http://127.0.0.1:8000/upload?directory=~/cm/cloudmesh-cc/tests/workflow-example'        
        -H 'accept: application/json'         -d ''

        :param archive: tgz, xz, tar.gz, or tar file with workflow files

        :type archive: str

        curl -X 'POST'        
        'http://127.0.0.1:8000/upload?archive=ThePathToYourArchiveFile'        
        -H 'accept: application/json'         -d ''

        :param yaml: yaml file with workflow specifications

        :type yaml: str

        curl -X 'POST'        
        'http://127.0.0.1:8000/upload?yaml=~/cm/cloudmesh-cc/tests/workflow-example/workflow-example.yaml'        
        -H 'accept: application/json'         -d ''

        :return: success or failure message
      operationId: upload_upload_post
      parameters:
        - description: path to workflow dir that contains scripts and yaml file
          required: false
          schema:
            title: Directory
            type: string
            description: path to workflow dir that contains scripts and yaml file
          name: directory
          in: query
        - description: path to archive file that can be tgx, xz, tar.gz, or tar
          required: false
          schema:
            title: Archive
            type: string
            description: path to archive file that can be tgx, xz, tar.gz, or tar
          name: archive
          in: query
        - description: path to yaml file for workflow
          required: false
          schema:
            title: Yaml
            type: string
            description: path to yaml file for workflow
          name: yaml
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /workflow/{name}:
    get:
      tags:
        - workflow
      summary: Get Workflow
      description: >-
        retrieves a job in a workflow, if specified. if not specified,

        retrieves an entire workflow


        you need to have first uploaded the workflow-example for this curl to
        work!

        curl -X 'GET'        
        'http://127.0.0.1:8000/workflow/workflow-example'         -H 'accept:
        application/json'


        :param request:

        :type request:

        :param name: name of the workflow

        :type name: str

        :param job: name of the job

        :type job: str

        :param output: how to print workflow. can be html or table

        :type output: str

        :return: success or failure message

        :rtype:
      operationId: get_workflow_workflow__name__get
      parameters:
        - required: true
          schema:
            title: Name
            type: string
          name: name
          in: path
        - required: false
          schema:
            title: Job
            type: string
          name: job
          in: query
        - required: false
          schema:
            title: Output
            type: string
          name: output
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    delete:
      tags:
        - workflow
      summary: Delete Workflow
      description: >-
        deletes the job in the specified workflow if specified.

        If the job is not specified, it deletes entire workflow.


        example curl:

        we need to have first uploaded workflow-example for this curl to work!

        curl -X 'DELETE'        
        'http://127.0.0.1:8000/workflow/workflow-example'         -H 'accept:
        application/json'

        :param name: name of the workflow

        :type name: str

        :param job: name of the job

        :type job: str

        :return: success or failure message
      operationId: delete_workflow_workflow__name__delete
      parameters:
        - required: true
          schema:
            title: Name
            type: string
          name: name
          in: path
        - required: false
          schema:
            title: Job
            type: string
          name: job
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /run/{name}:
    get:
      tags:
        - workflow
      summary: Run Workflow
      description: >-
        runs a specified workflow according to provided run type


        example curl:

        we need to have first uploaded workflow-example for this curl to work!

        curl -X 'GET'        
        'http://127.0.0.1:8000/run/workflow-example?run_type=topo'         -H
        'accept: application/json'


        :param request:

        :type request:

        :param name: name of workflow

        :type name: str

        :param run_type: type of run, either topo or parallel

        :type run_type: str

        :param redirect:

        :type redirect:

        :return: success or exception message

        :rtype:
      operationId: run_workflow_run__name__get
      parameters:
        - required: true
          schema:
            title: Name
            type: string
          name: name
          in: path
        - required: false
          schema:
            title: Run Type
            type: string
            default: topo
          name: run_type
          in: query
        - required: false
          schema:
            title: Redirect
            type: string
          name: redirect
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /add-job/{name_of_workflow}:
    get:
      tags:
        - workflow
      summary: Add Job
      description: >-
        This command adds a node to a workflow. with the specified arguments. A
        check
                    is returned and the user is alerted if arguments are missing
                    arguments are passed in ATTRIBUTE=VALUE fashion.
                    if the name of the workflow is omitted, the default workflow is used.
                    If no job name is specified, an automated number that is kept in the
                    config.yaml file will be used and the name will be job-n

        example curl:

        we need to have first uploaded workflow-example for this curl to work!

        curl -X 'GET'        
        'http://127.0.0.1:8000/add-job/workflow-example?job=myCoolJob&user=CoolPerson&host=local&kind=local&status=ready&script=coolJob.sh&progress=0&label=CoolLabel'        
        -H 'accept: application/json'


        :param name_of_workflow: the name of the workflow

        :type name_of_workflow: str

        :param job: the specifications and characteristics of the job

        :type job: Jobpy

        :param user:

        :type user:

        :param host:

        :type host:

        :param kind:

        :type kind:

        :param status:

        :type status:

        :param script:

        :type script:

        :param exec:

        :type exec:

        :param progress:

        :type progress:

        :param label:

        :type label:

        :param parent:

        :type parent:

        :return: returns jobs within the specified workflow

        :rtype:
      operationId: add_job_add_job__name_of_workflow__get
      parameters:
        - required: true
          schema:
            title: Name Of Workflow
            type: string
          name: name_of_workflow
          in: path
        - required: true
          schema:
            title: Job
            type: string
          name: job
          in: query
        - required: false
          schema:
            title: User
            type: string
          name: user
          in: query
        - required: false
          schema:
            title: Host
            type: string
          name: host
          in: query
        - required: false
          schema:
            title: Kind
            type: string
          name: kind
          in: query
        - required: false
          schema:
            title: Status
            type: string
          name: status
          in: query
        - required: false
          schema:
            title: Script
            type: string
          name: script
          in: query
        - required: false
          schema:
            title: Exec
            type: string
          name: exec
          in: query
        - required: false
          schema:
            title: Progress
            type: string
          name: progress
          in: query
        - required: false
          schema:
            title: Label
            type: string
          name: label
          in: query
        - required: false
          schema:
            title: Parent
            type: string
          name: parent
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
components:
  schemas:
    HTTPValidationError:
      title: HTTPValidationError
      type: object
      properties:
        detail:
          title: Detail
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
    ValidationError:
      title: ValidationError
      required:
        - loc
        - msg
        - type
      type: object
      properties:
        loc:
          title: Location
          type: array
          items:
            anyOf:
              - type: string
              - type: integer
        msg:
          title: Message
          type: string
        type:
          title: Error Type
          type: string
